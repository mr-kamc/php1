<?php
//Задание 3
var_dump(3 / 1);
/*  Операция деления возвращает число с плавающей точкой, кроме случая, когда оба значения являются
целыми числами, которые делятся нацело. Это как раз наш случай. */

var_dump(1 / 3);
/*  А вот во втором случае мы видим, что число 1 нацело не делится, и поэтому получаем число с
плавающей точкой. */

var_dump('20cats' + 40);
/* Если строка начинается с верного числового значения, то эта строка приводится к этому значению */

var_dump(18 % 4);
/* Деление по модулю. Целочисленный остаток от деления. */


//Задание 4
// Оператор присваивания обозначает, что значением выражения присваивания будет являться то, что присваивается.
echo($a = 2);//в данном примере мы переменной $a присваиваем значение 2. Следовательно 2 и будет являться значением
//выражения присваивания
$x = ($y = 12) - 8;//в данном выражении мы видим как переменной $y присваивается значение 12. Значением выражения
//присваивания для переменной $y является выражение со значением 12. В свою очередь переменной $x присваивается
//значение равное разности переменной $y и 8, т.е 4


//Задание 5
var_dump(1 == 1.0);
/* В данном случае число с плавающей точкой будет приведено к целому значению, поэтому true */
var_dump(1 === 1.0);
/* А в данном случае преобразование типов не происходит false */
var_dump('02' == 2);
/* Строка приводится к числу и сравниваются два значения. true */
var_dump('02' === 2);
/* Преобразование типов не происходит. false */
var_dump('02' == '2');
/* Строки приводятся к числу. true */

//Задание 6
$x = true xor true;
var_dump($x);
/* Логический оператор 'xor' или 'исключающее или' будет выдавать true в том случае, если один из операторов
(но не оба) будет true.
Но в данном примере приоритет оператора присваивания выше, чем у оператора xor. Это выражение можно представить
как: ( $x = true ) xor true */


/*Линейный конгруэнтный метод описывается формулой Xn+1 = (a * Xn + c) mod m;
где m - модуль, m >= 2, a-множитель - (0 <= a < m), c - приращение (0 <= c < m), X0 = начальное значение(0 <= X0 < m)
*/
$m = 10;
$x0 = $a = $c = 7;
$x1 = ((($a * $x0) + $c) % $m);
$x2 = ((($a * $x1) + $c) % $m);
$x3 = ((($a * $x2) + $c) % $m);
$x4 = ((($a * $x3) + $c) % $m);
$x5 = ((($a * $x4) + $c) % $m);
$x6 = ((($a * $x5) + $c) % $m);
$x7 = ((($a * $x6) + $c) % $m);
$x8 = ((($a * $x7) + $c) % $m);
$x9 = ((($a * $x8) + $c) % $m);

echo $x0 . ', ' . $x1 . ', ' . $x2 . ', ' . $x3 . ', ' . $x4 . ', ' . $x5 . ', ' . $x6 . ', ' . $x7 . ', ' .
    $x8 . ', ' . $x9 . '.';

