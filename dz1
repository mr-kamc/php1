<?php
//Задание 3
var_dump(3 / 1);
/**  Операция деления возвращает число с плавающей точкой, кроме случая, когда оба значения являются
 * целыми числами, которые делятся нацело. Это как раз наш случай. */

var_dump(1 / 3);
/**  А вот во втором случае мы видим, что число 1 нацело не делится, и поэтому получаем число с
 * плавающей точкой. */

var_dump('20cats' + 40);
/** Если строка начинается с верного числового значения, то эта строка приводится к этому значению */

var_dump(18 % 4);
/** Деление по модулю. Целочисленный остаток от деления. */


//Задание 4
echo($a = 2);//Значением является "2"
$x = ($y = 12) - 8;//Значением является "4"


//Задание 5
var_dump(1 == 1.0);
/** В данном случае число с плавающей точкой будет приведено к целому значению, поэтому true */
var_dump(1 === 1.0);
/** А в данном случае преобразование типов не происходит false */
var_dump('02' == 2);
/** Строка приводится к числу и сравниваются два значения. true */
var_dump('02' === 2);
/** Преобразование типов не происходит. false */
var_dump('02' == '2');
/** Строки приводятся к числу. true */

//Задание 6
$x = true xor true;
var_dump($x);
/** Логический оператор 'xor' или 'исключающее или' будет выдавать true в том случае, если один из операторов
 * (но не оба) будет true.
 * Но в данном примере приоритет оператора присваивания выше, чем у оператора xor. Это выражение можно представить
 * как: ( $x = true ) xor true */
